/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.0 - 2014-11-16
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.pagination"]), angular.module("ui.bootstrap.pagination", []).controller("PaginationController", ["$scope", "$attrs", "$parse", function (e, t, a) {
    var n = this, i = {$setViewValue: angular.noop}, r = t.numPages ? a(t.numPages).assign : angular.noop;
    this.init = function (r, o) {
        i = r, this.config = o, i.$render = function () {
            n.render()
        }, t.itemsPerPage ? e.$parent.$watch(a(t.itemsPerPage), function (t) {
            n.itemsPerPage = parseInt(t, 10), e.totalPages = n.calculateTotalPages()
        }) : this.itemsPerPage = o.itemsPerPage
    }, this.calculateTotalPages = function () {
        var t = this.itemsPerPage < 1 ? 1 : Math.ceil(e.totalItems / this.itemsPerPage);
        return Math.max(t || 0, 1)
    }, this.render = function () {
        e.page = parseInt(i.$viewValue, 10) || 1
    }, e.selectPage = function (t) {
        e.page !== t && t > 0 && t <= e.totalPages && (i.$setViewValue(t), i.$render())
    }, e.getText = function (t) {
        return e[t + "Text"] || n.config[t + "Text"]
    }, e.noPrevious = function () {
        return 1 === e.page
    }, e.noNext = function () {
        return e.page === e.totalPages
    }, e.$watch("totalItems", function () {
        e.totalPages = n.calculateTotalPages()
    }), e.$watch("totalPages", function (t) {
        r(e.$parent, t), e.page > t ? e.selectPage(t) : i.$render()
    })
}]).constant("paginationConfig", {
    itemsPerPage: 10,
    boundaryLinks: !1,
    directionLinks: !0,
    firstText: "First",
    previousText: "Previous",
    nextText: "Next",
    lastText: "Last",
    rotate: !0
}).directive("pagination", ["$parse", "paginationConfig", function (e, t) {
    return {
        restrict: "EA",
        scope: {totalItems: "=", firstText: "@", previousText: "@", nextText: "@", lastText: "@"},
        require: ["pagination", "?ngModel"],
        controller: "PaginationController",
        templateUrl: "template/pagination/pagination.html",
        replace: !0,
        link: function (a, n, i, r) {
            function o(e, t, a) {
                return {number: e, text: t, active: a}
            }

            function s(e, t) {
                var a = [], n = 1, i = t, r = angular.isDefined(u) && t > u;
                r && (c ? (n = Math.max(e - Math.floor(u / 2), 1), i = n + u - 1, i > t && (i = t, n = i - u + 1)) : (n = (Math.ceil(e / u) - 1) * u + 1, i = Math.min(n + u - 1, t)));
                for (var s = n; i >= s; s++) {
                    var l = o(s, s, s === e);
                    a.push(l)
                }
                if (r && !c) {
                    if (n > 1) {
                        var g = o(n - 1, "...", !1);
                        a.unshift(g)
                    }
                    if (t > i) {
                        var p = o(i + 1, "...", !1);
                        a.push(p)
                    }
                }
                return a
            }

            var l = r[0], g = r[1];
            if (g) {
                var u = angular.isDefined(i.maxSize) ? a.$parent.$eval(i.maxSize) : t.maxSize, c = angular.isDefined(i.rotate) ? a.$parent.$eval(i.rotate) : t.rotate;
                a.boundaryLinks = angular.isDefined(i.boundaryLinks) ? a.$parent.$eval(i.boundaryLinks) : t.boundaryLinks, a.directionLinks = angular.isDefined(i.directionLinks) ? a.$parent.$eval(i.directionLinks) : t.directionLinks, l.init(g, t), i.maxSize && a.$parent.$watch(e(i.maxSize), function (e) {
                    u = parseInt(e, 10), l.render()
                });
                var p = l.render;
                l.render = function () {
                    p(), a.page > 0 && a.page <= a.totalPages && (a.pages = s(a.page, a.totalPages))
                }
            }
        }
    }
}]).constant("pagerConfig", {
    itemsPerPage: 10,
    previousText: "« Previous",
    nextText: "Next »",
    align: !0
}).directive("pager", ["pagerConfig", function (e) {
    return {
        restrict: "EA",
        scope: {totalItems: "=", previousText: "@", nextText: "@"},
        require: ["pager", "?ngModel"],
        controller: "PaginationController",
        templateUrl: "template/pagination/pager.html",
        replace: !0,
        link: function (t, a, n, i) {
            var r = i[0], o = i[1];
            o && (t.align = angular.isDefined(n.align) ? t.$parent.$eval(n.align) : e.align, r.init(o, e))
        }
    }
}]);